{"version":3,"sources":["webpack:///src/app/pages/svc-page/service-card/service-card.component.ts","webpack:///src/app/pages/svc-page/service-card/service-card.component.html","webpack:///src/app/pages/svc-page/svc-page.module.ts","webpack:///src/app/shared/resolvers/serviceinfo.resolver.ts"],"names":["ServiceCardComponent","router","actRoute","paramsName","asideListCard","serviceInfo","subActRoute","data","subscribe","asideList","subParams","params","name","subService","serviceInf","serviceShowedComponent","find","point","unsubscribe","selector","templateUrl","styleUrls","routes","path","component","resolve","SVCPageModule","forChild","declarations","imports","exports","ServiceInfoResolver","reqService","route","state","getServiceInfo","providedIn"],"mappings":"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","file":"pages-svc-page-svc-page-module-es5.js","sourcesContent":["import { ActivatedRoute, Params, Router } from '@angular/router';\nimport { AfterContentChecked, Component, OnDestroy, OnInit } from '@angular/core';\nimport { ServiceCard, ServiceInfo } from 'src/app/shared/interfaces';\nimport { RequestService } from 'src/app/shared/services/request.service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-service-card',\n  templateUrl: './service-card.component.html',\n  styleUrls: ['./service-card.component.scss']\n})\nexport class ServiceCardComponent implements OnInit, OnDestroy, AfterContentChecked{\n\n  subParams: Subscription\n  subService: Subscription\n  subActRoute: Subscription\n\n  paramsName = ''\n  asideListCard: ServiceCard[] = []\n  serviceInfo: ServiceInfo[] = []\n  serviceShowedComponent: ServiceInfo\n\n  constructor(\n    private router: Router, //for back button\n    private actRoute: ActivatedRoute) { }\n\n  ngOnInit() {\n    this.subActRoute = this.actRoute.data.subscribe(data => {\n      this.asideListCard = data.asideList\n    })\n    this.subParams = this.actRoute.params.subscribe((params: Params) => {\n      this.paramsName = params.name\n      this.subService = this.actRoute.data.subscribe(data => {\n        this.serviceInfo = data.serviceInf\n        this.serviceShowedComponent = this.serviceInfo.find(point => point.name === this.paramsName)\n      })\n    })\n  }\n\n  ngAfterContentChecked(){\n    this.serviceShowedComponent = this.serviceInfo.find(point => point.name == this.paramsName)\n  }\n\n  ngOnDestroy(){\n    if (this.subParams) {\n      this.subParams.unsubscribe()\n    }\n    if (this.subService) {\n      this.subService.unsubscribe()\n    }\n    if (this.subActRoute) {\n      this.subActRoute.unsubscribe()\n    }\n  }\n\n}\n","<section>\n  <div class=\"canvas\">\n    <div class=\"information\" *ngIf=\"serviceShowedComponent;\n      else loading\">\n      <h3 class=\"heading\">{{serviceShowedComponent.title}}</h3>\n      <!-- <h4>Услуги и ремонт:</h4> -->\n      <p id=\"text-before\">{{serviceShowedComponent.main.text}}</p>\n      <ul id=\"list-work\">\n        <li class=\"items\" *ngFor=\"let item of serviceShowedComponent.main.types\">\n          {{item.term}}: {{item.price}} руб.\n        </li>\n      </ul>\n      <p id=\"text-after\">{{serviceShowedComponent.main.nexttext}}</p>\n      <p class=\"about\">{{serviceShowedComponent.about}}</p>\n    </div>\n    <ng-template #loading>\n      <div class=\"information\">Загрузка данных о сервисе...</div>\n    </ng-template>\n\n    <aside class=\"sidebar\">\n      <ul>\n        <li\n          *ngFor=\"let card of asideListCard\"\n          [routerLink]=\"['/services', card.name]\"\n          class=\"slip\" id=\"{{card.name}}\">\n          <h3  [ngStyle]=\"{\n            backgroundColor: card.name == paramsName ? '#403D7A' : 'rgba(251, 251, 251, 0.97)',\n            color: card.name == paramsName ? 'rgba(251, 251, 251, 0.97)': '#403D7A'\n          }\"\n          >{{card.title | uppercase}}</h3>\n        </li>\n      </ul>\n    </aside>\n  </div>\n</section>\n","import { NgModule } from \"@angular/core\";\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { SharedModule } from 'src/app/shared/shared.module';\r\n\r\nimport { ServiceCardComponent } from './service-card/service-card.component';\r\nimport { AsideListResolver } from 'src/app/shared/resolvers/asidelist.resolver';\r\nimport { ServiceInfoResolver } from 'src/app/shared/resolvers/serviceinfo.resolver';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path:'',\r\n    component:ServiceCardComponent,\r\n    resolve:{\r\n      asideList:AsideListResolver,\r\n      serviceInf:ServiceInfoResolver\r\n    }\r\n  }\r\n]\r\n\r\n@NgModule({\r\n  declarations:[ServiceCardComponent],\r\n  imports:[\r\n    SharedModule,\r\n    RouterModule.forChild(routes)],\r\n  exports:[RouterModule]\r\n})\r\nexport class SVCPageModule{}\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { RequestService } from 'src/app/shared/services/request.service';\r\nimport { ServiceInfo } from 'src/app/shared/interfaces';\r\n\r\n@Injectable({providedIn:'root'})\r\nexport class ServiceInfoResolver implements Resolve<ServiceInfo[]>{\r\n\r\n  constructor(private reqService: RequestService){}\r\n\r\n  resolve(route: ActivatedRouteSnapshot,\r\n          state: RouterStateSnapshot): ServiceInfo[] | Observable<ServiceInfo[]> | Promise<ServiceInfo[]> {\r\n    return this.reqService.getServiceInfo()\r\n  }\r\n\r\n}\r\n"]}