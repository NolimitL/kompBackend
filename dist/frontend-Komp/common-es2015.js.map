{"version":3,"sources":["./src/app/shared/resolvers/asidelist.resolver.ts","./src/app/shared/services/comments.service.ts","./src/app/shared/services/request.service.ts"],"names":[],"mappings":"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","file":"common-es2015.js","sourcesContent":["import { RequestService } from 'src/app/shared/services/request.service';\r\nimport { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\r\nimport { ServiceCard } from 'src/app/shared/interfaces';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class AsideListResolver implements Resolve<ServiceCard[]>{\r\n\r\n  constructor(private reqService: RequestService){}\r\n\r\n  resolve(route: ActivatedRouteSnapshot,\r\n          state: RouterStateSnapshot): ServiceCard[] | Observable<ServiceCard[]> | Promise<ServiceCard[]> {\r\n    if (this.reqService.getSvcPos.length == 0) {\r\n      return this.reqService.getServiceView()\r\n    } else {\r\n      return this.reqService.getSvcPos\r\n    }\r\n  }\r\n\r\n}\r\n","import { map, tap } from 'rxjs/operators';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from \"@angular/core\";\r\nimport { CommentsList } from '../interfaces';\r\n\r\n@Injectable({providedIn:'root'})\r\nexport class CommentsService{\r\n\r\n  commentsArr:CommentsList[] = []\r\n\r\n  constructor(private http: HttpClient){\r\n    let time = new Date().getTime()\r\n    const interval = 300000\r\n  }\r\n\r\n  get comments(){\r\n    return this.commentsArr\r\n  }\r\n\r\n  getCommentsList(): Observable<CommentsList[]>{\r\n    return this.http.get<CommentsList[]>(`${environment.urlAPI}/comments`)\r\n      .pipe(\r\n        map(arr => {\r\n          arr.forEach(comment => comment.date = new Date(comment.date))\r\n          this.commentsArr = arr\r\n          return arr\r\n        })\r\n      )\r\n  }\r\n\r\n  postComment(body: CommentsList): Observable<any> {\r\n    return this.http.post(`${environment.urlAPI}/comments`, body)\r\n  }\r\n\r\n\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { map, switchMap } from 'rxjs/operators';\r\nimport { PositionRel, ServiceInfo } from './../interfaces';\r\nimport { ServiceCard } from 'src/app/shared/interfaces';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n\r\n@Injectable({providedIn:\"root\"})\r\nexport class RequestService{\r\n\r\n  serviceView: ServiceCard[] = []\r\n\r\n  constructor(private http: HttpClient){}\r\n\r\n  get getSvcPos(){\r\n    return this.serviceView\r\n  }\r\n\r\n  getServicePosition(listCard: ServiceCard[]): Observable<ServiceCard[]> | null{\r\n    return this.http.get(`${environment.urlAPI}/extra/position`)\r\n      .pipe(\r\n        map((position: PositionRel) => {\r\n          listCard.forEach(card => {\r\n            card.id = +position.pos[card.name]\r\n          })\r\n          this.serviceView = listCard.sort((a, b) => a.id - b.id)\r\n          return this.serviceView\r\n        })\r\n      )\r\n  }\r\n\r\n  getServiceView(): Observable<ServiceCard[]> | null{\r\n    return this.http.get<ServiceCard[]>(`${environment.urlAPI}/extra/card-view`)\r\n      .pipe(\r\n        switchMap((list) => {\r\n          return this.getServicePosition(list)\r\n        })\r\n      )\r\n  }\r\n\r\n  getServiceInfo(): Observable<ServiceInfo[]> | null{\r\n    return this.http.get<ServiceInfo[]>(`${environment.urlAPI}/extra/service-info`)\r\n  }\r\n\r\n}\r\n"],"sourceRoot":"webpack:///"}