{"version":3,"sources":["webpack:///src/app/shared/resolvers/asidelist.resolver.ts","webpack:///src/app/shared/services/comments.service.ts","webpack:///src/app/shared/services/request.service.ts"],"names":["AsideListResolver","reqService","route","state","getSvcPos","length","getServiceView","providedIn","CommentsService","http","commentsArr","time","Date","getTime","interval","get","urlAPI","pipe","arr","forEach","comment","date","body","post","RequestService","serviceView","listCard","position","card","id","pos","name","sort","a","b","list","getServicePosition"],"mappings":"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","file":"common-es5.js","sourcesContent":["import { RequestService } from 'src/app/shared/services/request.service';\r\nimport { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\r\nimport { ServiceCard } from 'src/app/shared/interfaces';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class AsideListResolver implements Resolve<ServiceCard[]>{\r\n\r\n  constructor(private reqService: RequestService){}\r\n\r\n  resolve(route: ActivatedRouteSnapshot,\r\n          state: RouterStateSnapshot): ServiceCard[] | Observable<ServiceCard[]> | Promise<ServiceCard[]> {\r\n    if (this.reqService.getSvcPos.length == 0) {\r\n      return this.reqService.getServiceView()\r\n    } else {\r\n      return this.reqService.getSvcPos\r\n    }\r\n  }\r\n\r\n}\r\n","import { map, tap } from 'rxjs/operators';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from \"@angular/core\";\r\nimport { CommentsList } from '../interfaces';\r\n\r\n@Injectable({providedIn:'root'})\r\nexport class CommentsService{\r\n\r\n  commentsArr:CommentsList[] = []\r\n\r\n  constructor(private http: HttpClient){\r\n    let time = new Date().getTime()\r\n    const interval = 300000\r\n  }\r\n\r\n  get comments(){\r\n    return this.commentsArr\r\n  }\r\n\r\n  getCommentsList(): Observable<CommentsList[]>{\r\n    return this.http.get<CommentsList[]>(`${environment.urlAPI}/comments`)\r\n      .pipe(\r\n        map(arr => {\r\n          arr.forEach(comment => comment.date = new Date(comment.date))\r\n          this.commentsArr = arr\r\n          return arr\r\n        })\r\n      )\r\n  }\r\n\r\n  postComment(body: CommentsList): Observable<any> {\r\n    return this.http.post(`${environment.urlAPI}/comments`, body)\r\n  }\r\n\r\n\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { map, switchMap } from 'rxjs/operators';\r\nimport { PositionRel, ServiceInfo } from './../interfaces';\r\nimport { ServiceCard } from 'src/app/shared/interfaces';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n\r\n@Injectable({providedIn:\"root\"})\r\nexport class RequestService{\r\n\r\n  serviceView: ServiceCard[] = []\r\n\r\n  constructor(private http: HttpClient){}\r\n\r\n  get getSvcPos(){\r\n    return this.serviceView\r\n  }\r\n\r\n  getServicePosition(listCard: ServiceCard[]): Observable<ServiceCard[]> | null{\r\n    return this.http.get(`${environment.urlAPI}/extra/position`)\r\n      .pipe(\r\n        map((position: PositionRel) => {\r\n          listCard.forEach(card => {\r\n            card.id = +position.pos[card.name]\r\n          })\r\n          this.serviceView = listCard.sort((a, b) => a.id - b.id)\r\n          return this.serviceView\r\n        })\r\n      )\r\n  }\r\n\r\n  getServiceView(): Observable<ServiceCard[]> | null{\r\n    return this.http.get<ServiceCard[]>(`${environment.urlAPI}/extra/card-view`)\r\n      .pipe(\r\n        switchMap((list) => {\r\n          return this.getServicePosition(list)\r\n        })\r\n      )\r\n  }\r\n\r\n  getServiceInfo(): Observable<ServiceInfo[]> | null{\r\n    return this.http.get<ServiceInfo[]>(`${environment.urlAPI}/extra/service-info`)\r\n  }\r\n\r\n}\r\n"]}